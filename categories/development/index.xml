<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Espen Braastad</title>
    <link>http://www.espenbraastad.no/categories/development/index.xml</link>
    <description>Recent content on Espen Braastad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.espenbraastad.no/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Filebin upgrade</title>
      <link>http://www.espenbraastad.no/posts/filebin-upgrade/</link>
      <pubDate>Sun, 29 May 2016 20:40:48 +0200</pubDate>
      
      <guid>http://www.espenbraastad.no/posts/filebin-upgrade/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://filebin.net&#34;&gt;https://filebin.net&lt;/a&gt; is a public and free file upload/sharing service. Its main design principle is to be incredibly simple to use.&lt;/p&gt;

&lt;p&gt;It has been in production for several years, and has more or less been unmodified until now. Today it has been upgraded in several ways, and this post aims to elaborate on some of the changes.&lt;/p&gt;

&lt;h2 id=&#34;complete-rewrite&#34;&gt;Complete rewrite&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/espebra/filebin/tree/python&#34;&gt;The previous version of Filebin&lt;/a&gt; was written in Python and kept meta data in &lt;a href=&#34;https://mongodb.com&#34;&gt;MongoDB&lt;/a&gt;. For a number of reasons, Filebin has been completely rewritten in Go. It does no longer depend on any database except the local filesystem.&lt;/p&gt;

&lt;p&gt;Some of the most visible changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tags are now called bins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The concept of &lt;em&gt;tags&lt;/em&gt; was always difficult to explain and confusing for new users. Hopefully &lt;em&gt;bins&lt;/em&gt; will be easier to understand. At least it is related to the domain and application name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bins are private only&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Earlier, tags could (optionally) be promoted publicly by being shown in a public list, for example to be picked up by crawlers. To simplify and avoid abuse, this feature is removed. From now on, all bins are private and it is necessary to know the URL to get access. The URL has to be shared using some other mechanism outside Filebin, such as email or instant messaging.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;No moderation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;report for moderation&lt;/em&gt; functionality is gone. As a replacement, files can be deleted by any user knowing the URL to the bin. This is potentially controversional and problematic. The idea is to let users themselves delete malicious or illegal files uploaded by other users instead of going through a moderation process.&lt;/p&gt;

&lt;p&gt;The potential downside is obviously that bad internet citizens that know the URL to a perfectly valid bin have access to delete it, and may do so just for the fun of it.&lt;/p&gt;

&lt;p&gt;This open permission model is a bit experimental, and will have to be reconsidered as time goes. Feedback and suggestions are appreciated.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Album view&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bins with images now have an &lt;em&gt;album view&lt;/em&gt; with larger versions of the images. This makes it convenient to view multiple images.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamic expiration of bins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bins are created with a default expiration time of two months. Whenever new files are uploaded to a bin, its expiration time is reset to two months again. This makes bins long lived if files are uploaded now and then.&lt;/p&gt;

&lt;p&gt;The default expiration at the time of this writing is two months, but it can be adjusted.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mobile friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The web interface is responsive and mobile friendly. Files uploaded from iOS devices are handled properly to &lt;a href=&#34;http://apple.stackexchange.com/questions/118154/can-i-specify-the-file-name-of-an-ios-safari-image-upload&#34;&gt;avoid file name collision&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;new-hardware-and-software-stack&#34;&gt;New hardware and software stack&lt;/h2&gt;

&lt;p&gt;The infrastructure, bandwidth and hardware needed to run &lt;a href=&#34;https://filebin.net&#34;&gt;filebin.net&lt;/a&gt; is sponsored by &lt;a href=&#34;https://www.redpill-linpro.com/&#34;&gt;Redpill Linpro&lt;/a&gt;, the leading provider of professional Open Source services and products in the Nordic region.&lt;/p&gt;

&lt;p&gt;As part of todays upgrade, &lt;a href=&#34;https://filebin.net&#34;&gt;filebin.net&lt;/a&gt; has been migrated into their awesome IaaS cloud which is based on &lt;a href=&#34;https://www.openstack.org/&#34;&gt;OpenStack&lt;/a&gt; and &lt;a href=&#34;http://ceph.com/&#34;&gt;Ceph&lt;/a&gt;, runs on modern hardware and spans multiple locations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encrypted communications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Client-server communication is now encrypted using HTTPS/TLS with certificates from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. The TLS proxy &lt;a href=&#34;https://hitch-tls.org&#34;&gt;Hitch&lt;/a&gt; is used to take care of the TLS handling.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP caching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://varnish-cache.org&#34;&gt;Varnish Cache&lt;/a&gt; is now running in front of Filebin to boost performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code of Filebin is available in &lt;a href=&#34;https://github.com/espebra/filebin&#34;&gt;Github&lt;/a&gt;. Bugs are reported and tracked in &lt;a href=&#34;https://github.com/espebra/filebin/issues&#34;&gt;Github issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to reach out with feedback and suggestions by email to espebra(a)ifi.uio.no, or by leaving a comment to this blog post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gofer - Simple notification IRC bot</title>
      <link>http://www.espenbraastad.no/posts/gofer-notification-irc-bot/</link>
      <pubDate>Fri, 08 Jan 2016 21:11:44 +0100</pubDate>
      
      <guid>http://www.espenbraastad.no/posts/gofer-notification-irc-bot/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/espebra/gofer/&#34;&gt;Gofer&lt;/a&gt; is an notification type of IRC bot which is simple to deploy and super easy to integrate with existing services. It serves two main purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Process messages in IRC channels and &lt;a href=&#34;https://github.com/espebra/gofer#command-execution&#34;&gt;execute commands&lt;/a&gt; to trigger actions based on pre-defined patterns. A good use case is to look for messages matching &lt;code&gt;#\d+&lt;/code&gt; (for example &lt;code&gt;#1337&lt;/code&gt;), look up the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;status&lt;/em&gt; in a issue tracker and print the information back in the IRC channel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user | So I just pushed a fix for #123.
bot  | #123 [Open]: Server crash when foo (https://issue.tracker/tickets/123)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Relay notifications from other services onto IRC via the built in &lt;a href=&#34;https://github.com/espebra/gofer#http-api-interface&#34;&gt;HTTP API&lt;/a&gt;. Good use cases for this are to let monitoring systems notify an IRC channel whenever some service status changes, and notify an IRC channel whenever a new ticket is created in the ticket system. Consider the following cURL command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -d &amp;quot;message=CRITICAL: http on somehost.example.com is unavailable - Socket timeout after 10 seconds&amp;quot; https://bot.example.com/channel/ops/privmsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will produce the following privmsg (regular message) in the IRC channel &lt;em&gt;#ops&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bot | CRITICAL: http on somehost.example.com is unavailable - Socket timeout after 10 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Being written in Go, gofer may be built and distributed as a statically linked binary on most platforms without dependencies.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dummy API, Go rewrite</title>
      <link>http://www.espenbraastad.no/posts/dummy-api-rewrite-in-go/</link>
      <pubDate>Sat, 16 May 2015 19:48:47 +0200</pubDate>
      
      <guid>http://www.espenbraastad.no/posts/dummy-api-rewrite-in-go/</guid>
      <description>&lt;p&gt;Dummy API was &lt;a href=&#34;http://www.espenbraastad.no/posts/dummy-api/&#34;&gt;originally&lt;/a&gt; written in Lua for running on top of &lt;a href=&#34;https://www.openresty.org/&#34;&gt;OpenResty&lt;/a&gt;. Reasons were high performance and simplicity. The most common Linux distributions do not provide packages for OpenResty in their repositories, which means that it has to be installed from source. This is straight forward, but it adds up - both in time required and extra build dependencies.&lt;/p&gt;

&lt;p&gt;The purpose of Dummy API is to be that web application that can be rapidly installed and started when it is necessary to test API managers and web caches with a proper web application. The installation should be as simple and quick as possible.&lt;/p&gt;

&lt;p&gt;I turned to &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; and its &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;http server&lt;/a&gt;, and reimplemented the Dummy API. What is really appealing about Go is that it is possible to compile an entire web application including all dependencies into one binary file. It means that the Dummy API and the web server can be compiled and distributed as one executable file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install golang
$ go build dummy-api.go
$ chmod +x dummy-api
$ ./dummy-api -host=0.0.0.0 -port=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to cross compile to various architectures and platforms.&lt;/p&gt;

&lt;p&gt;I have compiled and pushed the binary version for &lt;code&gt;Linux&lt;/code&gt; on &lt;code&gt;x86_64&lt;/code&gt; to the repository. The result is that the installation steps have been narrowed down to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/espebra/dummy-api/raw/master/dummy-api
$ chmod +x dummy-api
$ ./dummy-api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, it will bind to &lt;code&gt;127.0.0.1:1337&lt;/code&gt;. &lt;code&gt;./dummy-api -help&lt;/code&gt; shows the usage guide:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage of ./dummy-api:
  -host=&amp;quot;127.0.0.1&amp;quot;: Listen host
  -maxheaderbytes=1048576: Max header bytes.
  -port=1337: Listen port
  -readtimeout=10: Read timeout in seconds
  -verbose=false: Verbose stdout.
  -writetimeout=10: Write timeout in seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage guide for web clients is shown with the &lt;code&gt;help&lt;/code&gt; query parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET http://host/?help

Dummy API
=========

The following request headers and query parameters will make an impact on the response.

Delay
-----
header-delay = {int}         Delay to first header byte in ms.
body-delay = {int}           Delay to first body byte in ms.

Cache-control
-------------
max-age = {int}              Set the cache-control max-age value.
s-maxage = {int}             Set the cache-control s-maxage value.
must-revalidate              Set cache-control must-revalidate.
public                       Set cache-control public.
private                      Set cache-control private.
no-store                     Set cache-control no-store.
no-cache                     Set cache-control no-cache.
no-transform                 Set cache-control no-transform.

Misc
----
content-length               Set the content-length header, otherwise chunked
                             transfer encoding is used.
random-content = {int}       Add random string to the response of given length.
predictable-content = {int}  Add predictable string to the response of given
                             length.
connection=close             Add connection=close to the response headers.
response-status = {int}      Set the response status.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Go version is available in &lt;a href=&#34;https://github.com/espebra/dummy-api/&#34;&gt;master&lt;/a&gt;, while the Lua version is available in the &lt;a href=&#34;https://github.com/espebra/dummy-api/tree/lua&#34;&gt;Lua branch&lt;/a&gt;. Remember to run it with an unprivileged user.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Varnish goes upstack with varnish modules and varnish configuration language</title>
      <link>http://www.espenbraastad.no/posts/varnish-goes-upstack-with-varnish-modules-and-varnish-configuration-language/</link>
      <pubDate>Thu, 07 May 2015 10:55:56 +0200</pubDate>
      
      <guid>http://www.espenbraastad.no/posts/varnish-goes-upstack-with-varnish-modules-and-varnish-configuration-language/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This post was first published at &lt;a href=&#34;http://highscalability.com/blog/2015/5/6/varnish-goes-upstack-with-varnish-modules-and-varnish-config.html&#34;&gt;High Scalability&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Varnish Software has just released Varnish API Engine, a high performance HTTP API Gateway which handles authentication, authorization and throttling all built on top of Varnish Cache. The Varnish API Engine can easily extend your current set of APIs with a uniform access control layer that has built in caching abilities for high volume read operations, and it provides real-time metrics.&lt;/p&gt;

&lt;p&gt;Varnish API Engine is built using well known components like memcached, SQLite and most importantly Varnish Cache. The management API is written in Python. A core part of the product is written as an application on top of Varnish using VCL (Varnish Configuration Language) and VMODs (Varnish Modules) for extended functionality.&lt;/p&gt;

&lt;p&gt;We would like to use this as an opportunity to show how you can create your own flexible yet still high performance applications in VCL with the help of VMODs.&lt;/p&gt;

&lt;h2 id=&#34;vmods&#34;&gt;VMODs&lt;/h2&gt;

&lt;p&gt;VCL is the language used to configure Varnish Cache. When varnishd loads a VCL configuration file, it will convert it into C code, compile it and then load it dynamically. It is therefore possible to extend functionality of VCL by inlining C code directly into the VCL configuration file, but the preferred way to do it since Varnish Cache 3 has been to use Varnish Modules, or VMODs for short, instead.&lt;/p&gt;

&lt;p&gt;The typical request flow in a stack containing Varnish Cache is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.espenbraastad.no/img/normal-workflow.png&#34; alt=&#34;normal-workflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The client sends HTTP requests which are received and processed by Varnish Cache. Varnish Cache will decide to look up the requests in cache or not, and eventually it may fetch the content from the backend. This works very well, but we can do so much more.&lt;/p&gt;

&lt;p&gt;The VCL language is designed for performance, and as such does not provide loops or external calls natively. VMODs, on the other hand, are free of these restrictions. This is great for flexibility, but places the responsibility for ensuring performance and avoiding delays on the VMOD code and behaviour.&lt;/p&gt;

&lt;p&gt;The API Engine design illustrates how the powerful combination of VCL and custom VMODs can be used to build new applications. In Varnish API Engine, the request flow is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.espenbraastad.no/img/vmod-workflow.png&#34; alt=&#34;Fig showing workflow with sqlite and memcached VMODs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each request is matched against a ruleset using the SQLite VMOD and a set of Memcached counters using the memcached VMOD. The request is denied if one of the checks fail, for example if authentication failed or if one of the request limits have been exceeded.&lt;/p&gt;

&lt;h2 id=&#34;example-application&#34;&gt;Example application&lt;/h2&gt;

&lt;p&gt;The following example is a very simple version of some of the concepts used in the Varnish API Engine. We will create a small application written in VCL that will look up the requested URL in a database containing throttling rules and enforce them on a per IP basis.&lt;/p&gt;

&lt;p&gt;Since testing and maintainability is crucial when developing an application, we will use Varnish&amp;rsquo;s integrated testing tool: &lt;code&gt;varnishtest&lt;/code&gt;. Varnishtest is a powerful testing tool which is used to test all aspects of Varnish Cache. Varnishtest&amp;rsquo;s simple interface means that developers and operation engineers can leverage it to test their VCL/VMOD configurations.&lt;/p&gt;

&lt;p&gt;Varnishtest reads a file describing a set of mock servers, clients, and varnish instances. The clients perform requests that go via varnish, to the server. Expectations can be set on content, headers, HTTP response codes and more. With &lt;code&gt;varnishtest&lt;/code&gt; we can quickly test our example application, and verify that our requests are passed or blocked as per the defined expectations.&lt;/p&gt;

&lt;p&gt;First we need a database with our throttle rules. Using the sqlite3 command, we create the database in &lt;code&gt;/tmp/rules.db3&lt;/code&gt; and add a couple of rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlite3 /tmp/rules.db3 &amp;quot;CREATE TABLE t (rule text, path text);&amp;quot;
$ sqlite3 /tmp/rules.db3 &amp;quot;INSERT INTO t (rule, path) VALUES (&#39;3r5&#39;, &#39;/search&#39;);&amp;quot;
$ sqlite3 /tmp/rules.db3 &amp;quot;INSERT INTO t (rule, path) VALUES (&#39;15r3600&#39;, &#39;/login&#39;);&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These rules will allow 3 requests per 5 seconds to &lt;code&gt;/search&lt;/code&gt; and 15 requests per hour to &lt;code&gt;/login&lt;/code&gt;. The idea is to enforce these rules on a per IP basis.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, we’ll write the tests and VCL configuration in the same file, &lt;a href=&#34;http://www.espenbraastad.no/files/throttle.vtc&#34;&gt;throttle.vtc&lt;/a&gt;. It is, however, possible to include separate VCL configuration files using include statements in the test files, to separate VCL configuration and the different tests.&lt;/p&gt;

&lt;p&gt;The first line in the file is optionally used to set the name or the title of the test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;varnishtest &amp;quot;Simple throttling with SQLite and Memcached&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our test environment consists of one backend, called s1. We will first expect one request to a URL without a rule in the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server s1 {
    rxreq
    expect req.url == &amp;quot;/&amp;quot;
    txresp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then expect 4 requests to &lt;code&gt;/search&lt;/code&gt; to arrive according to our following expectations. Note that the query parameters are slightly different, making all of these unique requests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    rxreq
    expect req.url == &amp;quot;/search?id=123&amp;amp;type=1&amp;quot;
    expect req.http.path == &amp;quot;/search&amp;quot;
    expect req.http.rule == &amp;quot;3r5&amp;quot;
    expect req.http.requests == &amp;quot;3&amp;quot;
    expect req.http.period == &amp;quot;5&amp;quot;
    expect req.http.counter == &amp;quot;1&amp;quot;
    txresp
  
    rxreq
    expect req.url == &amp;quot;/search?id=123&amp;amp;type=2&amp;quot;
    expect req.http.path == &amp;quot;/search&amp;quot;
    expect req.http.rule == &amp;quot;3r5&amp;quot;
    expect req.http.requests == &amp;quot;3&amp;quot;
    expect req.http.period == &amp;quot;5&amp;quot;
    expect req.http.counter == &amp;quot;2&amp;quot;
    txresp
  
    rxreq
    expect req.url == &amp;quot;/search?id=123&amp;amp;type=3&amp;quot;
    expect req.http.path == &amp;quot;/search&amp;quot;
    expect req.http.rule == &amp;quot;3r5&amp;quot;
    expect req.http.requests == &amp;quot;3&amp;quot;
    expect req.http.period == &amp;quot;5&amp;quot;
    expect req.http.counter == &amp;quot;3&amp;quot;
    txresp
  
    rxreq
    expect req.url == &amp;quot;/search?id=123&amp;amp;type=4&amp;quot;
    expect req.http.path == &amp;quot;/search&amp;quot;
    expect req.http.rule == &amp;quot;3r5&amp;quot;
    expect req.http.requests == &amp;quot;3&amp;quot;
    expect req.http.period == &amp;quot;5&amp;quot;
    expect req.http.counter == &amp;quot;1&amp;quot;
    txresp
} -start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it is time to write the mini-application in VCL. Our test environment consists of one varnish instance, called v1. Initially, the VCL version marker and the VMOD imports are added.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;varnish v1 -vcl+backend {
    vcl 4.0;
    import std;
    import sqlite3;
    import memcached;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VMODs are usually configured in &lt;code&gt;vcl_init&lt;/code&gt;, and this is true for sqlite3 and memcached as well. For sqlite3, we set the path to the database and the field delimiter to use on multi column results. The memcached VMOD can have a wide variety of configuration options supported by &lt;a href=&#34;http://docs.libmemcached.org/libmemcached_configuration.html&#34;&gt;libmemcached&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sub vcl_init {
        sqlite3.open(&amp;quot;/tmp/rules.db3&amp;quot;, &amp;quot;|;&amp;quot;);
        memcached.servers(&amp;quot;--SERVER=localhost --BINARY-PROTOCOL&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;vcl_recv&lt;/code&gt;, the incoming HTTP requests are received. We start by extracting the request path without query parameters and potential dangerous characters. This is important since the path will be part of the SQL query later. The following regex will match &lt;code&gt;req.url&lt;/code&gt; from the beginning of the line up until any of the characters ? &amp;amp; ;  “  ‘ or whitespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sub vcl_recv {
        set req.http.path = regsub(req.url, {&amp;quot;^([^?&amp;amp;;&amp;quot;&#39; ]+).*&amp;quot;}, &amp;quot;\1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The use of &lt;code&gt;{&amp;quot; &amp;quot;}&lt;/code&gt; in the regular expression enables handling of the &amp;ldquo; character in the regular expression rule. The path we just extracted is used when the rule is looked up in the database. The response, if any, is stored in &lt;code&gt;req.http.rule&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        set req.http.rule = sqlite3.exec(&amp;quot;SELECT rule FROM t WHERE path=&#39;&amp;quot; + req.http.path + &amp;quot;&#39; LIMIT 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we get a response, it will be on the format &lt;code&gt;RnT&lt;/code&gt;, where &lt;code&gt;R&lt;/code&gt; is the amount of requests allowed over a period of &lt;code&gt;T&lt;/code&gt; seconds. Since this is a string, we need to apply more regex to separate those.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        set req.http.requests = regsub(req.http.rule, &amp;quot;^([0-9]+)r.*$&amp;quot;, &amp;quot;\1&amp;quot;);
        set req.http.period = regsub(req.http.rule, &amp;quot;^[0-9]+r([0-9]+)$&amp;quot;, &amp;quot;\1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We do throttling on this request only if we got proper values from the previous regex filters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        if (req.http.requests != &amp;quot;&amp;quot; &amp;amp;&amp;amp; req.http.period != &amp;quot;&amp;quot;) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Increment or create a Memcached counter unique for this &lt;code&gt;client.ip&lt;/code&gt; and path with the value 1. The expiry time we specify is equal to the period in the throttle rule set in the database. This way, the throttle rules can be flexible regarding time period. The return value is the new value of the counter, which corresponds to the amount of requests this &lt;code&gt;client.ip&lt;/code&gt; has done this path in the current time period.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;           set req.http.counter = memcached.incr_set(
               req.http.path + &amp;quot;-&amp;quot; + client.ip, 1, 1, std.integer(req.http.period, 0));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if the counter is higher than the limit set in the database. If it is, then abort the request here with a &lt;code&gt;429&lt;/code&gt; response code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;            if (std.integer(req.http.counter, 0) &amp;gt; std.integer(req.http.requests, 0)) {
                 return (synth(429, &amp;quot;Too many requests&amp;quot;));
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;vcl_deliver&lt;/code&gt; we set response headers showing the throttle limit and status for each request which might be helpful for the consumers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sub vcl_deliver {
        if (req.http.requests &amp;amp;&amp;amp; req.http.counter &amp;amp;&amp;amp; req.http.period) {
            set resp.http.X-RateLimit-Limit = req.http.requests;
            set resp.http.X-RateLimit-Counter = req.http.counter;
            set resp.http.X-RateLimit-Period = req.http.period;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Errors will get the same headers set in &lt;code&gt;vcl_synth&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sub vcl_synth {
        if (req.http.requests &amp;amp;&amp;amp; req.http.counter &amp;amp;&amp;amp; req.http.period) {
            set resp.http.X-RateLimit-Limit = req.http.requests;
            set resp.http.X-RateLimit-Counter = req.http.counter;
            set resp.http.X-RateLimit-Period = req.http.period;
        }
    }
} -start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration is complete, and it is time to add some clients to verify that the configuration is correct. First we send a request that we expect to be unthrottled, meaning that there are no throttle rules in the database for this URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;client c1 {
    txreq -url &amp;quot;/&amp;quot;
    rxresp
    expect resp.status == 200
    expect resp.http.X-RateLimit-Limit == &amp;lt;undef&amp;gt;
    expect resp.http.X-RateLimit-Counter == &amp;lt;undef&amp;gt;
    expect resp.http.X-RateLimit-Period == &amp;lt;undef&amp;gt;
} -run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next client sends requests to a URL that we know is a match in the throttle database, and we expect the rate-limit headers to be set. The throttle rule for &lt;code&gt;/search&lt;/code&gt; is &lt;code&gt;3r5&lt;/code&gt;, which means that the three first requests within a 5 second period should succeed (with return code &lt;code&gt;200&lt;/code&gt;) while the fourth request should be throttled (with return code &lt;code&gt;429&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;client c2 {
    txreq -url &amp;quot;/search?id=123&amp;amp;type=1&amp;quot;
    rxresp
    expect resp.status == 200
    expect resp.http.X-RateLimit-Limit == &amp;quot;3&amp;quot;
    expect resp.http.X-RateLimit-Counter == &amp;quot;1&amp;quot;
    expect resp.http.X-RateLimit-Period == &amp;quot;5&amp;quot;
  
    txreq -url &amp;quot;/search?id=123&amp;amp;type=2&amp;quot;
    rxresp
    expect resp.status == 200
    expect resp.http.X-RateLimit-Limit == &amp;quot;3&amp;quot;
    expect resp.http.X-RateLimit-Counter == &amp;quot;2&amp;quot;
    expect resp.http.X-RateLimit-Period == &amp;quot;5&amp;quot;
  
    txreq -url &amp;quot;/search?id=123&amp;amp;type=3&amp;quot;
    rxresp
    expect resp.status == 200
    expect resp.http.X-RateLimit-Limit == &amp;quot;3&amp;quot;
    expect resp.http.X-RateLimit-Counter == &amp;quot;3&amp;quot;
    expect resp.http.X-RateLimit-Period == &amp;quot;5&amp;quot;
  
    txreq -url &amp;quot;/search?id=123&amp;amp;type=4&amp;quot;
    rxresp
    expect resp.status == 429
    expect resp.http.X-RateLimit-Limit == &amp;quot;3&amp;quot;
    expect resp.http.X-RateLimit-Counter == &amp;quot;4&amp;quot;
    expect resp.http.X-RateLimit-Period == &amp;quot;5&amp;quot;
} -run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we know that requests are being throttled. To verify that new requests are allowed after the time limit is up, we add a delay here before we send the next and last request. This request should succeed since we are in a new throttle window.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delay 5;
 
client c3 {
   txreq -url &amp;quot;/search?id=123&amp;amp;type=4&amp;quot;
   rxresp
   expect resp.status == 200
   expect resp.http.X-RateLimit-Limit == &amp;quot;3&amp;quot;
   expect resp.http.X-RateLimit-Counter == &amp;quot;1&amp;quot;
   expect resp.http.X-RateLimit-Period == &amp;quot;5&amp;quot;
} -run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To execute the test file, make sure the memcached service is running locally and execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ varnishtest example.vtc
#     top  TEST example.vtc passed (6.533)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;-v&lt;/code&gt; for verbose mode to get more information from the test run.&lt;/p&gt;

&lt;p&gt;Requests to our application in the example will receive the following response headers. The first is a request that has been allowed, and the second is a request that has been throttled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;$ curl -iI http://localhost/search
HTTP/1.1 200 OK
Age: 6
Content-Length: 936
X-RateLimit-Counter: 1
X-RateLimit-Limit: 3
X-RateLimit-Period: 5
X-Varnish: 32770 3
Via: 1.1 varnish-plus-v4

$ curl -iI http://localhost/search
HTTP/1.1 429 Too many requests
Content-Length: 273
X-RateLimit-Counter: 4
X-RateLimit-Limit: 3
X-RateLimit-Period: 5
X-Varnish: 32774
Via: 1.1 varnish-plus-v4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete &lt;a href=&#34;http://www.espenbraastad.no/files/throttle.vtc&#34;&gt;throttle.vtc&lt;/a&gt; file outputs timestamp information before and after VMOD processing, to give us some data on the overhead introduced by the Memcached and SQLite queries. Running 60 requests in varnishtest on a local vm with Memcached running locally returned the following timings pr operation (in ms):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite SELECT, max: 0.32, median: 0.08, average: 0.115&lt;/li&gt;
&lt;li&gt;Memcached incr_set(), max: 1.23, median: 0.27, average: 0.29&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are by no means scientific results, but hints to performance that should for most scenarios prove to be fast enough. Performance is also about the ability to scale horizontally. The simple example provided in this article will scale horizontally with global counters in a pool of Memcached instances if needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.espenbraastad.no/img/horizontal-scaling.png&#34; alt=&#34;Fig showing horizontally scaled setup&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;There are a number of VMODs available, and the &lt;a href=&#34;https://www.varnish-cache.org/VMODs&#34;&gt;VMODs Directory&lt;/a&gt; is a good starting point. Some highlights from the directory are VMODs for cURL usage, Redis, Digest functions and various authentication modules.&lt;/p&gt;

&lt;p&gt;Varnish Plus, the fully supported commercial edition of Varnish Cache, is bundled with a set of high quality, support backed VMODs. For the open source edition, you can download and compile the VMODs you require manually.&lt;/p&gt;

&lt;p&gt;Varnish API Engine is more than VCL and VMODs. It also packs features such as key authentication, a centralized REST API for management, administration interface and real time statistics. For more information about Varnish API Engine, please contact &lt;a href=&#34;https://www.varnish-software.com/&#34;&gt;Varnish Software&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dummy API</title>
      <link>http://www.espenbraastad.no/posts/dummy-api/</link>
      <pubDate>Sat, 02 May 2015 21:42:21 +0200</pubDate>
      
      <guid>http://www.espenbraastad.no/posts/dummy-api/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update: Dummy API has been &lt;a href=&#34;http://www.espenbraastad.no/posts/dummy-api-rewrite-in-go/&#34;&gt;rewritten in Go&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The purpose of Dummy API to act as a performant, simple and flexible HTTP API to use when testing API gateway performance. Put it behing a API gateway and generate responses to it from a set of consumers/clients. The Dummy API will read the request headers and query parameters and generate the responses accordingly. Some examples are custom cache-control header, response status and response delays.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.espenbraastad.no/img/dummy-api.png&#34; alt=&#34;Dummy API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following is a &lt;code&gt;GET&lt;/code&gt; request to host &lt;code&gt;dummy-api.varnish-software.com&lt;/code&gt; and path &lt;code&gt;/foo&lt;/code&gt;, where the response should contain a 10 characters random string, 20 characters predictable random string, response status &lt;code&gt;418&lt;/code&gt; and a &lt;code&gt;cache-control&lt;/code&gt; header with the value &lt;code&gt;max-age=2, s-maxage=3&lt;/code&gt;. The response will be delivered with a 2 seconds delay before the first byte of the body, to mimic a slow web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;GET http://dummy-api.varnish-software.com/foo?random-content=10&amp;amp;predictable-content=20&amp;amp;response-status=418&amp;amp;body-delay=2&amp;amp;max-age=2&amp;amp;s-maxage=3

HTTP/1.1 418
Cache-control: max-age=2, s-maxage=3
Connection: close
Content-Type: application/json
Date: Sun, 03 May 2015 15:12:36 GMT
Server: Dummy API
Transfer-Encoding: chunked

{
    &amp;quot;body-delay&amp;quot;: 2,
    &amp;quot;host&amp;quot;: &amp;quot;dummy-api.varnish-software.com&amp;quot;,
    &amp;quot;max-age&amp;quot;: 2,
    &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
    &amp;quot;predictable-content&amp;quot;: &amp;quot;Q1qxI72mD3wFAGTtPlJx&amp;quot;,
    &amp;quot;random-content&amp;quot;: &amp;quot;NlYhricCPZ&amp;quot;,
    &amp;quot;request-headers&amp;quot;: {
        &amp;quot;accept&amp;quot;: &amp;quot;*/*&amp;quot;,
        &amp;quot;accept-encoding&amp;quot;: &amp;quot;gzip, deflate&amp;quot;,
        &amp;quot;host&amp;quot;: &amp;quot;dummy-api.varnish-software.com&amp;quot;,
        &amp;quot;user-agent&amp;quot;: &amp;quot;HTTPie/0.8.0&amp;quot;
    },
    &amp;quot;request-parameters&amp;quot;: {
        &amp;quot;body-delay&amp;quot;: &amp;quot;2&amp;quot;,
        &amp;quot;max-age&amp;quot;: &amp;quot;2&amp;quot;,
        &amp;quot;predictable-content&amp;quot;: &amp;quot;20&amp;quot;,
        &amp;quot;random-content&amp;quot;: &amp;quot;10&amp;quot;,
        &amp;quot;response-status&amp;quot;: &amp;quot;418&amp;quot;,
        &amp;quot;s-maxage&amp;quot;: &amp;quot;3\n&amp;quot;
    },
    &amp;quot;response-status&amp;quot;: 418,
    &amp;quot;s-maxage&amp;quot;: 3,
    &amp;quot;uri&amp;quot;: &amp;quot;/foo&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;dummy-api.varnish-software.com&lt;/code&gt; and path &lt;code&gt;/someurl&lt;/code&gt;, where the response status should be &lt;code&gt;201&lt;/code&gt;, the &lt;code&gt;cache-control&lt;/code&gt; header should be set to &lt;code&gt;must-revalidate&lt;/code&gt; and the &lt;code&gt;content-length&lt;/code&gt; header should be set instead of using &lt;code&gt;chunked&lt;/code&gt; &lt;code&gt;transfer-encoding&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST http://dummy-api.varnish-software.com/someurl?must-revalidate&amp;amp;response-status=201&amp;amp;content-length

HTTP/1.1 201 Created
Cache-control: must-revalidate
Connection: close
Content-Type: application/json
Content-length: 458
Date: Sun, 03 May 2015 15:13:43 GMT
Server: Dummy API

{
    &amp;quot;content-length&amp;quot;: true,
    &amp;quot;host&amp;quot;: &amp;quot;dummy-api.varnish-software.com&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
    &amp;quot;must-revalidate&amp;quot;: true,
    &amp;quot;request-headers&amp;quot;: {
        &amp;quot;accept&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;quot;accept-encoding&amp;quot;: &amp;quot;gzip, deflate&amp;quot;,
        &amp;quot;content-length&amp;quot;: &amp;quot;14&amp;quot;,
        &amp;quot;content-type&amp;quot;: &amp;quot;application/json; charset=utf-8&amp;quot;,
        &amp;quot;host&amp;quot;: &amp;quot;dummy-api.varnish-software.com&amp;quot;,
        &amp;quot;user-agent&amp;quot;: &amp;quot;HTTPie/0.8.0&amp;quot;
    },
    &amp;quot;request-parameters&amp;quot;: {
        &amp;quot;content-length&amp;quot;: true,
        &amp;quot;must-revalidate&amp;quot;: true,
        &amp;quot;response-status&amp;quot;: &amp;quot;201&amp;quot;
    },
    &amp;quot;response-status&amp;quot;: 201,
    &amp;quot;uri&amp;quot;: &amp;quot;/someurl&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The buit in help text is available with the &lt;code&gt;help&lt;/code&gt; request header or query parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;GET http://dummy-api.varnish-software.com/?help

HTTP/1.1 200 OK
Connection: close
Content-Type: text/plain
Date: Sat, 02 May 2015 19:59:39 GMT
Server: Dummy API
Transfer-Encoding: chunked
    
Dummy API
=========

The following request headers and query parameters will make an impact on the response.

Delay
-----
header-delay = {float}           Delay to first header byte
body-delay = {float}             Delay to first body byte

Cache-control
-------------
max-age = {int}                  Set the response max-age value
s-maxage = {int}                 Set the response s-maxage value
must-revalidate                  Set must-revalidate
public                           Set public
private                          Set private
no-store                         Set no-store
no-cache                         Set no-cache
no-transform                     Set no-transform

Misc
----
content-length                   Set the content-length header, otherwise chunked transfer encoding is used
random-content = {int}           Add random string to the response of given length
predictable-content = {int}      Add predictable string to the response of given length
response-status = {int}          Set the response status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Dummy API is written in Lua and is available for download at &lt;a href=&#34;https://github.com/espebra/dummy-api&#34;&gt;Github&lt;/a&gt;. It will run on the &lt;a href=&#34;http://openresty.org/&#34;&gt;OpenResty&lt;/a&gt; web application server.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>