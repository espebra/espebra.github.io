<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on Espen Braastad</title>
    <link>/tags/api/</link>
    <description>Recent content in API on Espen Braastad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 May 2015 19:48:47 +0200</lastBuildDate>
    <atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dummy API, Go rewrite</title>
      <link>/posts/dummy-api-rewrite-in-go/</link>
      <pubDate>Sat, 16 May 2015 19:48:47 +0200</pubDate>
      <guid>/posts/dummy-api-rewrite-in-go/</guid>
      <description>Dummy API was originally written in Lua for running on top of OpenResty. Reasons were high performance and simplicity. The most common Linux distributions do not provide packages for OpenResty in their repositories, which means that it has to be installed from source. This is straight forward, but it adds up - both in time required and extra build dependencies.
The purpose of Dummy API is to be that web application that can be rapidly installed and started when it is necessary to test API managers and web caches with a proper web application.</description>
    </item>
    <item>
      <title>Dummy API</title>
      <link>/posts/dummy-api/</link>
      <pubDate>Sat, 02 May 2015 21:42:21 +0200</pubDate>
      <guid>/posts/dummy-api/</guid>
      <description>Update: Dummy API has been rewritten in Go.
The purpose of Dummy API to act as a performant, simple and flexible HTTP API to use when testing API gateway performance. Put it behing a API gateway and generate responses to it from a set of consumers/clients. The Dummy API will read the request headers and query parameters and generate the responses accordingly. Some examples are custom cache-control header, response status and response delays.</description>
    </item>
  </channel>
</rss>
