<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Espen Braastad</title>
    <link>/</link>
    <description>Recent content on Espen Braastad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Nov 2023 23:00:00 +0100</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Filebin.net has moved to Hetzner</title>
      <link>/posts/filebin-moved-to-hetzner/</link>
      <pubDate>Tue, 21 Nov 2023 23:00:00 +0100</pubDate>
      <guid>/posts/filebin-moved-to-hetzner/</guid>
      <description>About the move Yesterday, on the 20th of November 2023, the hosting of the filebin.net service was moved from Redpill Linpro in Norway to Hetzner in Germany. Shout out to Redpill Linpro for providing free hosting for 11 years!
Some history Filebin was a hobby project that let me learn the HTML5 File API. The end result made it easy to share photos and videos with friends and family, which was difficult at the time for non technical people.</description>
    </item>
    <item>
      <title>ZFS NAS using CentOS 7 from tmpfs</title>
      <link>/posts/zfs-nas-on-tmpfs/</link>
      <pubDate>Tue, 24 Oct 2017 00:20:20 +0100</pubDate>
      <guid>/posts/zfs-nas-on-tmpfs/</guid>
      <description>Following up on the CentOS 7 root filesystem on tmpfs post, here comes a guide on how to run a ZFS enabled CentOS 7 NAS server (with the operating system) from tmpfs.
Hardware HP ProLiant MicroServer HP ProLiant MicroServer Remote Access Card AMD Turion(tm) II Neo N54L Dual-Core Processor 2x 8 GB 1333 MHZ ECC memory modules 4x 4 TB SATA hard drives (HGST, Western Digital and Seagate) Built-in Broadcom Limited NetXtreme BCM5723 Gigabit Ethernet adapter Preparing the build environment The disk image is built in macOS using Packer and VirtualBox.</description>
    </item>
    <item>
      <title>CentOS 7 root filesystem on tmpfs</title>
      <link>/posts/centos-7-rootfs-on-tmpfs/</link>
      <pubDate>Fri, 06 Jan 2017 21:34:20 +0100</pubDate>
      <guid>/posts/centos-7-rootfs-on-tmpfs/</guid>
      <description>Several years ago I wrote a series of posts on how to run EL6 with its root filesystem on tmpfs. This post is a continuation of that series, and explains step by step how to run CentOS 7 with its root filesystem in memory. It should apply to RHEL, Ubuntu, Debian and other Linux distributions as well. The post is a bit terse to focus on the concept, and several of the steps have potential for improvements.</description>
    </item>
    <item>
      <title>Filebin upgrade</title>
      <link>/posts/filebin-upgrade/</link>
      <pubDate>Sun, 29 May 2016 20:40:48 +0200</pubDate>
      <guid>/posts/filebin-upgrade/</guid>
      <description>https://filebin.net is a public and free file upload/sharing service. Its main design principle is to be incredibly simple to use.
It has been in production for several years, and has more or less been unmodified until now. Today it has been upgraded in several ways, and this post aims to elaborate on some of the changes.
Complete rewrite The previous version of Filebin was written in Python and kept meta data in MongoDB.</description>
    </item>
    <item>
      <title>Gofer - Simple notification IRC bot</title>
      <link>/posts/gofer-notification-irc-bot/</link>
      <pubDate>Fri, 08 Jan 2016 21:11:44 +0100</pubDate>
      <guid>/posts/gofer-notification-irc-bot/</guid>
      <description>Gofer is an notification type of IRC bot which is simple to deploy and super easy to integrate with existing services. It serves two main purposes:
Process messages in IRC channels and execute commands to trigger actions based on pre-defined patterns. A good use case is to look for messages matching #\d+ (for example #1337), look up the title and status in a issue tracker and print the information back in the IRC channel:</description>
    </item>
    <item>
      <title>Monitor stand / tabletop table IKEA hack</title>
      <link>/posts/monitor-stand-ikea-hack/</link>
      <pubDate>Wed, 16 Sep 2015 22:56:54 +0200</pubDate>
      <guid>/posts/monitor-stand-ikea-hack/</guid>
      <description>Background I needed something that would put my desktop monitors at the proper height on my desk. Instead of simply placing the monitors on some cardboards boxes, I decided to pick up something from IKEA to make a custom tabletop table / monitor stand.
Hardware Article # Item Price 102.678.95 CAPITA 4 pack of stainless steel legs, with a length of 16 cm NOK 95,- 301.798.74 EKBY HEMNES solid wood shelf, with an area of 119x28 cm NOK 135,- 802.</description>
    </item>
    <item>
      <title>Dummy API, Go rewrite</title>
      <link>/posts/dummy-api-rewrite-in-go/</link>
      <pubDate>Sat, 16 May 2015 19:48:47 +0200</pubDate>
      <guid>/posts/dummy-api-rewrite-in-go/</guid>
      <description>Dummy API was originally written in Lua for running on top of OpenResty. Reasons were high performance and simplicity. The most common Linux distributions do not provide packages for OpenResty in their repositories, which means that it has to be installed from source. This is straight forward, but it adds up - both in time required and extra build dependencies.
The purpose of Dummy API is to be that web application that can be rapidly installed and started when it is necessary to test API managers and web caches with a proper web application.</description>
    </item>
    <item>
      <title>Varnish goes upstack with varnish modules and varnish configuration language</title>
      <link>/posts/varnish-goes-upstack-with-varnish-modules-and-varnish-configuration-language/</link>
      <pubDate>Thu, 07 May 2015 10:55:56 +0200</pubDate>
      <guid>/posts/varnish-goes-upstack-with-varnish-modules-and-varnish-configuration-language/</guid>
      <description>This post was first published at High Scalability.
Varnish Software has just released Varnish API Engine, a high performance HTTP API Gateway which handles authentication, authorization and throttling all built on top of Varnish Cache. The Varnish API Engine can easily extend your current set of APIs with a uniform access control layer that has built in caching abilities for high volume read operations, and it provides real-time metrics.
Varnish API Engine is built using well known components like memcached, SQLite and most importantly Varnish Cache.</description>
    </item>
    <item>
      <title>Dummy API</title>
      <link>/posts/dummy-api/</link>
      <pubDate>Sat, 02 May 2015 21:42:21 +0200</pubDate>
      <guid>/posts/dummy-api/</guid>
      <description>Update: Dummy API has been rewritten in Go.
The purpose of Dummy API to act as a performant, simple and flexible HTTP API to use when testing API gateway performance. Put it behing a API gateway and generate responses to it from a set of consumers/clients. The Dummy API will read the request headers and query parameters and generate the responses accordingly. Some examples are custom cache-control header, response status and response delays.</description>
    </item>
    <item>
      <title>Remote console on HP ProLiant MicroServer G7 N54L</title>
      <link>/posts/remote-console-on-hp-proliant-microserver-g7-n54l/</link>
      <pubDate>Sat, 30 Aug 2014 20:48:00 +0100</pubDate>
      <guid>/posts/remote-console-on-hp-proliant-microserver-g7-n54l/</guid>
      <description>I bought the HP ProLiant MicroServer G7 N54L a while ago. I threw in a HP MicroServer Remote Access Card Kit to get remote console and power management. While the power management, web UI and CLI (over ssh) works fine out of the box, the remote console (KVM) does not. What happens is that the KVM client shows the following Out of range message:
To fix this, go into the BIOS.</description>
    </item>
    <item>
      <title>Altibox, TV- og datatrafikk over samme nettverkskabel</title>
      <link>/posts/altibox-tv-and-data-over-the-same-ethernet-cable/</link>
      <pubDate>Thu, 22 May 2014 22:41:00 +0100</pubDate>
      <guid>/posts/altibox-tv-and-data-over-the-same-ethernet-cable/</guid>
      <description>Altibox leverer en hjemmesentral hvor man henter ut TV-signal og internettilgang fra to (eller flere) forskjellige RJ45-porter. Som trådløs router har hjemmesentralen kun et minimum av funksjonalitet, og man skal ikke være en veldig avansert bruker før man vil rekonfigurere hjemmesentralen som en bridge og heller ha en egen trådløs router på baksiden. Dette gir også mening dersom boligen har flere etasjer, og hjemmesentralen ikke er kraftig nok til å levere god nok trådløs dekning.</description>
    </item>
    <item>
      <title>Temperature trend monitoring at home</title>
      <link>/posts/temperature-trend-monitoring-at-home/</link>
      <pubDate>Wed, 19 Feb 2014 23:32:00 +0100</pubDate>
      <guid>/posts/temperature-trend-monitoring-at-home/</guid>
      <description>Background I&amp;rsquo;ve got balanced ventilation in my apartment. It works OK, but I don&amp;rsquo;t fully understand how it behaves if knobs are pushed and pots are turned, and I&amp;rsquo;m definitely not sure if its performance is as good as I should expect.
I&amp;rsquo;m going to do some measurements to see how the system reacts to changes in the outside temperature and tuning of the various settings. The first parameter to measure is the temperature in the air intake, exhaust air and some of the ventilation valves in the different rooms in the apartment.</description>
    </item>
    <item>
      <title>CentOS/RHEL/SL 6: root filesystem on tmpfs, UPDATE #2</title>
      <link>/posts/el6-rootfs-on-tmpfs-update2/</link>
      <pubDate>Sun, 23 Jun 2013 21:44:19 +0100</pubDate>
      <guid>/posts/el6-rootfs-on-tmpfs-update2/</guid>
      <description>Update 2017-06-30: Please see the updated guide which is more generic.
In a previous post, I’ve explained how to boot EL6 from memory without having / needing a physical disk.
A bright reader, Jeff, came up with an alternative method. This alternative method does not involve dd’ing the image into a loop device, but instead copying the contents of the disk image directly into tmpfs. The result is higher write/read performance and generally lower memory requirements.</description>
    </item>
    <item>
      <title>CentOS/RHEL/SL 6: root filesystem on tmpfs, UPDATE</title>
      <link>/posts/el6-rootfs-on-tmpfs-update/</link>
      <pubDate>Thu, 21 Mar 2013 09:57:00 +0100</pubDate>
      <guid>/posts/el6-rootfs-on-tmpfs-update/</guid>
      <description>Update 2017-06-30: Please see the updated guide which is more generic.
In EL6.4, the file /usr/share/dracut/modules.d/90dmsquash-live/dmsquash-live-root was updated so that the previous patch no longer works as it should. I’ve updated the patch, and here it is:
--- original 2013-03-20 16:25:23.698846581 +0100 +++ new 2013-03-21 08:58:11.175339694 +0100 @@ -24,6 +24,8 @@ getarg readonly_overlay &amp;amp;&amp;amp; readonly_overlay=&amp;#34;--readonly&amp;#34; || readonly_overlay=&amp;#34;&amp;#34; overlay=$(getarg overlay) +getarg toram &amp;amp;&amp;amp; toram=&amp;#34;yes&amp;#34; + # FIXME: we need to be able to hide the plymouth splash for the check really [ -e $livedev ] &amp;amp; fs=$(blkid -s TYPE -o value $livedev) if [ &amp;#34;$fs&amp;#34; = &amp;#34;iso9660&amp;#34; -o &amp;#34;$fs&amp;#34; = &amp;#34;udf&amp;#34; ]; then @@ -132,7 +134,10 @@ BASE_LOOPDEV=$( losetup -f ) losetup -r $BASE_LOOPDEV $EXT3FS - do_live_from_base_loop + # Create overlay only if toram is not set + if [ -z &amp;#34;$toram&amp;#34; ] ; then + do_live_from_base_loop + fi fi # we might have an embedded ext3 on squashfs to use as rootfs (compressed live) @@ -163,13 +168,66 @@ umount -l /squashfs - do_live_from_base_loop + # Create overlay only if toram is not set + if [ -z &amp;#34;$toram&amp;#34; ] ; then + do_live_from_base_loop + fi +fi + +# If the kernel parameter toram is set, create a tmpfs device and copy the +# filesystem to it.</description>
    </item>
    <item>
      <title>KVM/Xen and libvirt: currentMemory, memory and ballooning. Where did my memory go?</title>
      <link>/posts/memory-ballooning/</link>
      <pubDate>Mon, 24 Sep 2012 16:58:32 +0100</pubDate>
      <guid>/posts/memory-ballooning/</guid>
      <description>KVM and Xen provide a method to change the amount of memory in use by guests at runtime. The method is called memory ballooning [1, 2], and it must be supported by the guest operating system to work.
In libvirt, memory allocation (and hence the ballooning capability) for a guest can be configured using the memory, currentMemory and memballoon tags:
&amp;lt;domain type=&amp;#39;kvm&amp;#39;&amp;gt; [...] &amp;lt;memory unit=&amp;#39;KiB&amp;#39;&amp;gt;16777216&amp;lt;/memory&amp;gt; &amp;lt;currentMemory unit=&amp;#39;KiB&amp;#39;&amp;gt;1048576&amp;lt;/currentMemory&amp;gt; [...] &amp;lt;devices&amp;gt; &amp;lt;memballoon model=&amp;#39;virtio&amp;#39;/&amp;gt; &amp;lt;/devices&amp;gt; &amp;lt;/domain&amp;gt; The guest can never use more memory than specified in the memory tag and it is the amount of memory the guest will use at boot time.</description>
    </item>
    <item>
      <title>Filebin available on http://filebin.net</title>
      <link>/posts/filebin-available/</link>
      <pubDate>Fri, 27 Jul 2012 22:10:29 +0100</pubDate>
      <guid>/posts/filebin-available/</guid>
      <description>Filebin.net was created to try out the new File API features in HTML5.
Filebin is a web application that is somewhat similar to a pastebin, except that it&amp;rsquo;s for files. It is written in Python, and the code is available on Github.</description>
    </item>
    <item>
      <title>CentOS/RHEL/SL 6: root filesystem on tmpfs</title>
      <link>/posts/el6-rootfs-on-tmpfs/</link>
      <pubDate>Mon, 30 Apr 2012 21:44:19 +0100</pubDate>
      <guid>/posts/el6-rootfs-on-tmpfs/</guid>
      <description>Update 2017-06-30: Please see the updated guide which is more generic.
UPDATE: The patch below has been updated here.
There are several scenarios where conventional hard drives are not really needed. Examples are HPC cluster nodes, virtualization nodes, home theater streaming PCs, silent desktops, internet cafés and embedded systems. Hard drives tend to fail, they are slow, they consume power, they generate heat and noise, and they are quite expensive if you need/want something faster and more reliable than SATA.</description>
    </item>
    <item>
      <title>KVM with iPXE in RHEL6</title>
      <link>/posts/kvm-with-ipxe-in-rhel6/</link>
      <pubDate>Wed, 02 Nov 2011 22:29:50 +0100</pubDate>
      <guid>/posts/kvm-with-ipxe-in-rhel6/</guid>
      <description>A while ago I discovered the amazing iPXE project. It is a complete PXE implementation with lots of nifty features, based on the gPXE project. Redhat ships the gPXE firmware for qemu and KVM, and you might want to use iPXE instead as the iPXE project currently seems to be more active. The major features (copied from ipxe.org):
boot from a web server via HTTP boot from an iSCSI SAN boot from a Fibre Channel SAN via FCoE boot from an AoE SAN boot from a wireless network boot from a wide-area network boot from an Infiniband network control the boot process with a script First, download the source code:</description>
    </item>
    <item>
      <title>munincollector-ng</title>
      <link>/posts/munincollector-ng/</link>
      <pubDate>Mon, 16 Aug 2010 20:15:00 +0100</pubDate>
      <guid>/posts/munincollector-ng/</guid>
      <description>Munincollector-ng is a perl script that collects graphs from multiple munin installations to display them in one page. A scenario where this is helpful is when you have (too) many munin clients on (too) many munin masters, and you want to look through some of the graphs - i.e. the Disk usage in percent (aka df) plugin - without spending/wasting too much time browsing through the less important graphs.
It consists of one perl script and one configuration file.</description>
    </item>
  </channel>
</rss>
